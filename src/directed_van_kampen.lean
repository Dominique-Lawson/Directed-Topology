import category_theory.limits.shapes.comm_sq
import dihomotopy_cover
import pushout_alternative
import dihomotopy_to_path_dihomotopy
import morphism_aux

/-
  This file contains the directed version of the Van Kampen Theorem.
  The statement is as follows:
  Let `X : dTop` and `X‚ÇÅ X‚ÇÇ : set X` such that `X‚ÇÅ` and `X‚ÇÇ` are both open and `X‚ÇÅ ‚à™ X‚ÇÇ = X`.
  Let `i‚ÇÅ : X‚ÇÅ ‚à© X‚ÇÇ ‚Üí X‚ÇÅ`, `i‚ÇÇ : X‚ÇÅ ‚à© X‚ÇÇ ‚Üí X‚ÇÇ`, `j‚ÇÅ : X‚ÇÅ ‚Üí X` and `j‚ÇÇ : X‚ÇÇ ‚Üí X` be the inclusion maps in `dTop`.
  Then we have a pushout in `Cat`:
  dœÄ‚Çì(X‚ÇÅ ‚à© X‚ÇÇ) ------ dœÄ‚Çò i‚ÇÅ -----> dœÄ‚Çì(X‚ÇÅ)
       |                              |
       |                              |
       |                              |
     dœÄ‚Çò i‚ÇÇ                         dœÄ‚Çò j‚ÇÅ
       |                              |
       |                              |
       |                              |
    dœÄ‚Çì(X‚ÇÇ) ------- dœÄ‚Çò j‚ÇÇ ------> dœÄ‚Çì(X)

  The proof we give is constructive and is based on the proof given by
  Marco Grandis, Directed Homotopy Theory I, published in Cahiers de topologie et g√©om√©trie diff√©rentielle cat√©goriques, 44, no 4, pages 307-309, 2003.
-/
universes u v

open set
open_locale unit_interval classical fundamental_category

local attribute [instance] dipath.dihomotopic.setoid

noncomputable theory

namespace directed_van_kampen

open fundamental_category disubtype category_theory

variables {X : dTop.{u}} {X‚ÇÅ X‚ÇÇ : set X}
variables (hX : X‚ÇÅ ‚à™ X‚ÇÇ = set.univ)
variables (X‚ÇÅ_open : is_open X‚ÇÅ) (X‚ÇÇ_open : is_open X‚ÇÇ)


-- We will use a shorthand notation for the 4 morphisms in dTop:
-- i‚ÇÅ : X‚ÇÅ ‚à© X‚ÇÇ ‚ü∂ X‚ÇÅ
localized "notation (name := inclusion‚ÇÄ‚ÇÅ)
  `i‚ÇÅ` := dTop.directed_subset_hom $ set.inter_subset_left X‚ÇÅ X‚ÇÇ" in directed_van_kampen

-- i‚ÇÅ : X‚ÇÅ ‚à© X‚ÇÇ ‚ü∂ X‚ÇÇ
localized "notation (name := inclusion‚ÇÄ‚ÇÇ)
  `i‚ÇÇ` := dTop.directed_subset_hom $ set.inter_subset_right X‚ÇÅ X‚ÇÇ" in directed_van_kampen

-- j‚ÇÅ : X‚ÇÅ ‚ü∂ X
localized "notation (name := inclusion‚ÇÅ)
  `j‚ÇÅ` := dTop.directed_subtype_hom X‚ÇÅ" in directed_van_kampen

-- j‚ÇÇ : X‚ÇÇ ‚ü∂ X
localized "notation (name := inclusion‚ÇÇ)
  `j‚ÇÇ` := dTop.directed_subtype_hom X‚ÇÇ" in directed_van_kampen

namespace pushout_functor

open dipath dipath.covered dipath.covered_partwise auxiliary

variables {x y : X}
variables {C : category_theory.Cat.{u u}} (F‚ÇÅ : (dœÄ‚Çì (dTop.of X‚ÇÅ) ‚ü∂ C)) (F‚ÇÇ : (dœÄ‚Çì (dTop.of X‚ÇÇ) ‚ü∂ C))
variables (h_comm : (dœÄ‚Çò i‚ÇÅ) ‚ãô F‚ÇÅ = ((dœÄ‚Çò i‚ÇÇ) ‚ãô F‚ÇÇ))

section functor_props

variables {Y : dTop.{u}} {Y‚ÇÄ : set Y} {F : dœÄ‚Çì (dTop.of Y‚ÇÄ) ‚•§ C}

lemma subset_functor_trans {x y z : Y} {Œ≥‚ÇÅ : dipath x y} {Œ≥‚ÇÇ : dipath y z} (hŒ≥ : range (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) ‚äÜ Y‚ÇÄ) :
  (F.map ‚ü¶subtype_dipath Œ≥‚ÇÅ (subsets_of_trans_subset hŒ≥).1‚üß ‚â´ F.map ‚ü¶subtype_dipath Œ≥‚ÇÇ (subsets_of_trans_subset hŒ≥).2‚üß) =
    F.map ‚ü¶subtype_dipath (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) hŒ≥‚üß :=
begin
  rw ‚Üê subtype_trans hŒ≥,
  rw dipath.dihomotopic.comp_lift,
  exact (F.map_comp _ _).symm,
end

lemma subset_functor_reparam {x y : Y} {Œ≥ : dipath x y} (hŒ≥ : range Œ≥ ‚äÜ Y‚ÇÄ) {f : D(I, I)} (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
 F.map ‚ü¶subtype_dipath (Œ≥.reparam f hf‚ÇÄ hf‚ÇÅ)
    (show range (Œ≥.reparam f hf‚ÇÄ hf‚ÇÅ) ‚äÜ Y‚ÇÄ, by exact (dipath.range_reparam Œ≥ f hf‚ÇÄ hf‚ÇÅ).symm ‚ñ∏ hŒ≥)‚üß =
    F.map ‚ü¶@subtype_dipath Y Y‚ÇÄ x y Œ≥ hŒ≥‚üß :=
begin
  congr' 1,
  rw subtype_reparam hŒ≥ hf‚ÇÄ hf‚ÇÅ,
  symmetry,
  exact quotient.eq.mpr (dipath.dihomotopic.reparam (@subtype_dipath Y Y‚ÇÄ x y Œ≥ hŒ≥) f hf‚ÇÄ hf‚ÇÅ),
end

lemma functor_cast {X : dTop} (F : (dœÄ‚Çì X) ‚•§ C) {x y x' y' : X} (Œ≥ : dipath x y) (hx : x' = x) (hy : y' = y) :
  F.map ‚ü¶Œ≥.cast hx hy‚üß = (category_theory.eq_to_hom (congr_arg F.obj hx)) ‚â´ F.map ‚ü¶Œ≥‚üß ‚â´ (category_theory.eq_to_hom (congr_arg F.obj hy).symm) :=
begin
  subst_vars,
  rw category_theory.eq_to_hom_refl,
  rw category_theory.eq_to_hom_refl,
  rw category_theory.category.id_comp,
  rw category_theory.category.comp_id,
  congr' 2,
  ext t,
  refl,
end

end functor_props

/-
  Given a category C and functors F‚ÇÅ : dœÄ‚Çì X‚ÇÅ ‚•§ C and F‚ÇÇ : dœÄ‚Çì X‚ÇÇ ‚•§ C, we will construct a functor F : dœÄ‚Çì X ‚•§ C
-/
include hX F‚ÇÅ F‚ÇÇ


/- ### Functor on Objects -/

/-
- Define the behaviour on objects
-/
def functor_obj (x : dœÄ‚Çì X) : C :=
or.by_cases ((set.mem_union x X‚ÇÅ X‚ÇÇ).mp (filter.mem_top.mpr hX x)) (Œª hx, F‚ÇÅ.obj ‚ü®x, hx‚ü©) (Œª hx, F‚ÇÇ.obj ‚ü®x, hx‚ü©)

-- We will use the shorhand notation F_obj
localized "notation (name := functor_obj)
  `F_obj` := functor_obj hX F‚ÇÅ F‚ÇÇ" in directed_van_kampen

/-
  Under the assumption that the square commutes, we can show how the functor behaves on objects
-/
variables {F‚ÇÅ F‚ÇÇ}
include h_comm
lemma functor_obj_apply_one {x : X} (hx : x ‚àà X‚ÇÅ) : F‚ÇÅ.obj ‚ü®x, hx‚ü© = F_obj x := (dif_pos hx).symm

lemma functor_obj_apply_two {x : X} (hx‚ÇÇ : x ‚àà X‚ÇÇ) : F‚ÇÇ.obj ‚ü®x, hx‚ÇÇ‚ü© = F_obj x :=
begin
  by_cases hx‚ÇÅ : x ‚àà X‚ÇÅ,
  {
    have hx‚ÇÄ : x ‚àà X‚ÇÅ ‚à© X‚ÇÇ := ‚ü®hx‚ÇÅ, hx‚ÇÇ‚ü©,
    have : F‚ÇÅ.obj ((dœÄ‚Çò i‚ÇÅ).obj ‚ü®x, hx‚ÇÄ‚ü©) = F‚ÇÇ.obj ((dœÄ‚Çò i‚ÇÇ).obj ‚ü®x, hx‚ÇÄ‚ü©),
    {
      show ((dœÄ‚Çò i‚ÇÅ) ‚ãô F‚ÇÅ).obj ‚ü®x, hx‚ÇÄ‚ü© = ((dœÄ‚Çò i‚ÇÇ) ‚ãô F‚ÇÇ).obj ‚ü®x, hx‚ÇÄ‚ü©,
      rw h_comm,
    },

  	have : F‚ÇÅ.obj ‚ü®x, hx‚ÇÅ‚ü© = F‚ÇÇ.obj (‚ü®x, hx‚ÇÇ‚ü©),
    calc F‚ÇÅ.obj ‚ü®x, hx‚ÇÅ‚ü© = F‚ÇÅ.obj ((dœÄ‚Çò i‚ÇÅ).obj ‚ü®x, hx‚ÇÄ‚ü©) : rfl
                    ... = F‚ÇÇ.obj ((dœÄ‚Çò i‚ÇÇ).obj ‚ü®x, hx‚ÇÄ‚ü©) : this
                    ... = F‚ÇÇ.obj (‚ü®x, hx‚ÇÇ‚ü©) : rfl,

    rw this.symm,
    exact (dif_pos hx‚ÇÅ).symm,
  },
  exact (dif_neg hx‚ÇÅ).symm,
end

/- ### Functor on Maps -/

/-
  Define the mapping behaviour on paths that are fully covered by one set
-/
def functor_map_aux_part_one {Œ≥ : dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÅ) :
  F_obj x ‚ü∂ F_obj y :=
    (eq_to_hom (functor_obj_apply_one hX h_comm (source_elt_of_image_subset hŒ≥)).symm) ‚â´
    (F‚ÇÅ.map ‚ü¶subtype_dipath Œ≥ hŒ≥‚üß) ‚â´
    (eq_to_hom (functor_obj_apply_one hX h_comm (target_elt_of_image_subset hŒ≥)))

def functor_map_aux_part_two {Œ≥ : dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÇ) :
  F_obj x ‚ü∂ F_obj y :=
    (eq_to_hom (functor_obj_apply_two hX h_comm (source_elt_of_image_subset hŒ≥)).symm) ‚â´
    (F‚ÇÇ.map ‚ü¶subtype_dipath Œ≥ hŒ≥‚üß) ‚â´
    (eq_to_hom (functor_obj_apply_two hX h_comm (target_elt_of_image_subset hŒ≥)))

/-
  Show that these maps respect composition of paths
-/
lemma functor_map_aux_part_one_trans {x y z : X} {Œ≥‚ÇÅ : dipath x y} {Œ≥‚ÇÇ : dipath y z} (hŒ≥ : range (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) ‚äÜ X‚ÇÅ) :
  functor_map_aux_part_one hX h_comm hŒ≥ =
    functor_map_aux_part_one hX h_comm (subsets_of_trans_subset hŒ≥).1
  ‚â´ functor_map_aux_part_one hX h_comm (subsets_of_trans_subset hŒ≥).2 :=
begin
  unfold functor_map_aux_part_one,
  rw (subset_functor_trans hŒ≥).symm,
  simp,
end

lemma functor_map_aux_part_two_trans {x y z : X} {Œ≥‚ÇÅ : dipath x y} {Œ≥‚ÇÇ : dipath y z} (hŒ≥ : range (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) ‚äÜ X‚ÇÇ) :
  functor_map_aux_part_two hX h_comm hŒ≥ =
    functor_map_aux_part_two hX h_comm (subsets_of_trans_subset hŒ≥).1
  ‚â´ functor_map_aux_part_two hX h_comm (subsets_of_trans_subset hŒ≥).2 :=
begin
  unfold functor_map_aux_part_two,
  rw (subset_functor_trans hŒ≥).symm,
  simp,
end

/-
 Show that the maps respect reparametrization of paths
-/
lemma functor_map_one_reparam {x y : X} {Œ≥ : dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÅ) {f : D(I, I)} (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
  functor_map_aux_part_one hX h_comm hŒ≥ = functor_map_aux_part_one hX h_comm (reparam_subset_of_subset hŒ≥ hf‚ÇÄ hf‚ÇÅ) :=
begin
  unfold functor_map_aux_part_one,
  rw (subset_functor_reparam hŒ≥ hf‚ÇÄ hf‚ÇÅ),
end
  
lemma functor_map_two_reparam {x y : X} {Œ≥ : dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÇ) {f : D(I, I)} (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
  functor_map_aux_part_two hX h_comm hŒ≥ = functor_map_aux_part_two hX h_comm (reparam_subset_of_subset hŒ≥ hf‚ÇÄ hf‚ÇÅ) :=
begin
  unfold functor_map_aux_part_two,
  rw (subset_functor_reparam hŒ≥ hf‚ÇÄ hf‚ÇÅ),
end

/-
 Show that the maps respect reparametrization of paths
-/
lemma functor_map_one_refl {x : X} (hx : x ‚àà X‚ÇÅ) :
  functor_map_aux_part_one hX h_comm (range_refl_subset_of_mem hx) = ùüô (F_obj x) :=
begin
  unfold functor_map_aux_part_one,
  rw subtype_refl,
  rw ‚Üê id_eq_path_refl,
  rw F‚ÇÅ.map_id',
  simp,
end
  
lemma functor_map_two_refl {x : X} (hx : x ‚àà X‚ÇÇ) :
  functor_map_aux_part_two hX h_comm (range_refl_subset_of_mem hx) = ùüô (F_obj x) :=
begin
  unfold functor_map_aux_part_two,
  rw subtype_refl,
  rw ‚Üê id_eq_path_refl,
  rw F‚ÇÇ.map_id',
  simp,
end

/-
  Show that for any path living in X‚ÇÅ ‚à© X‚ÇÇ, it does not matter whether we apply the first or second map
-/
lemma functor_map_aux_parts_equal {Œ≥ : dipath x y} (hŒ≥‚ÇÅ : range Œ≥ ‚äÜ X‚ÇÅ) (hŒ≥‚ÇÇ : range Œ≥ ‚äÜ X‚ÇÇ) :
  functor_map_aux_part_one hX h_comm hŒ≥‚ÇÅ = functor_map_aux_part_two hX h_comm hŒ≥‚ÇÇ :=
begin
  unfold functor_map_aux_part_one functor_map_aux_part_two,
  have hŒ≥‚ÇÄ : range Œ≥ ‚äÜ X‚ÇÅ ‚à© X‚ÇÇ := subset_inter hŒ≥‚ÇÅ hŒ≥‚ÇÇ,
  apply (eq_to_hom_comp_iff _ _ _).mpr,
  apply (comp_eq_to_hom_iff _ _ _).mpr,
  simp,
  convert map_eq_map_of_eq h_comm ‚ü¶subtype_dipath Œ≥ hŒ≥‚ÇÄ‚üß,
end

/-
- ### Define the mapping behaviour on covered paths
-/
def functor_map_of_covered {Œ≥ : dipath x y} (hŒ≥ : covered Œ≥ hX) :
  F_obj x ‚ü∂ F_obj y :=
or.by_cases hŒ≥ (Œª hŒ≥, functor_map_aux_part_one hX h_comm hŒ≥) (Œª hŒ≥, functor_map_aux_part_two hX h_comm hŒ≥)

localized "notation (name := functor_map_covered)
  `F‚ÇÄ` := functor_map_of_covered hX h_comm" in directed_van_kampen

section functor_map_covered_properties

lemma functor_map_of_covered_apply_left {Œ≥ : dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÅ) :
  F‚ÇÄ (or.inl hŒ≥) = functor_map_aux_part_one hX h_comm hŒ≥ := dif_pos hŒ≥

lemma functor_map_of_covered_apply_left' {Œ≥ : dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÅ) :
  F‚ÇÄ (covered_partwise_of_covered 0 (or.inl hŒ≥)) = functor_map_aux_part_one hX h_comm hŒ≥ := functor_map_of_covered_apply_left _ _ _

lemma functor_map_of_covered_apply_right {Œ≥ : dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÇ) :
  F‚ÇÄ (or.inr hŒ≥) = functor_map_aux_part_two hX h_comm hŒ≥ :=
begin
  by_cases hŒ≥‚ÇÅ : range Œ≥ ‚äÜ X‚ÇÅ,
  {
    rw functor_map_of_covered_apply_left hX h_comm hŒ≥‚ÇÅ,
    exact functor_map_aux_parts_equal hX h_comm hŒ≥‚ÇÅ hŒ≥
  },
  apply dif_neg hŒ≥‚ÇÅ,
end

lemma functor_map_of_covered_equal {Œ≥‚ÇÅ Œ≥‚ÇÇ : dipath x y} (h : Œ≥‚ÇÅ = Œ≥‚ÇÇ) (hŒ≥‚ÇÅ : covered Œ≥‚ÇÅ hX) (hŒ≥‚ÇÇ : covered Œ≥‚ÇÇ hX) :
  F‚ÇÄ hŒ≥‚ÇÅ = F‚ÇÄ hŒ≥‚ÇÇ :=
begin
  subst_vars,
end

lemma functor_map_of_covered_refl : F‚ÇÄ (covered_refl x hX) = ùüô (F_obj x) :=
begin
  cases ((set.mem_union x X‚ÇÅ X‚ÇÇ).mp (filter.mem_top.mpr hX x)) with hx‚ÇÅ hx‚ÇÇ,
  {
    rw ‚Üê functor_map_one_refl,
    exact functor_map_of_covered_apply_left hX h_comm (disubtype.range_refl_subset_of_mem hx‚ÇÅ),
  },
  {
    rw ‚Üê functor_map_two_refl,
    exact functor_map_of_covered_apply_right hX h_comm (disubtype.range_refl_subset_of_mem hx‚ÇÇ),
  }
end

lemma functor_map_of_covered_apply_right' {Œ≥ : dipath x y} (hŒ≥ : range Œ≥ ‚äÜ X‚ÇÇ) :
  F‚ÇÄ (covered_partwise_of_covered 0 (or.inr hŒ≥)) = functor_map_aux_part_two hX h_comm hŒ≥ := functor_map_of_covered_apply_right _ _ _

lemma functor_map_of_covered_trans {x y z : X} {Œ≥‚ÇÅ : dipath x y} {Œ≥‚ÇÇ : dipath y z} (hŒ≥ : covered (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) hX) :
  F‚ÇÄ hŒ≥ = (F‚ÇÄ (covered_trans hŒ≥).1) ‚â´ (F‚ÇÄ (covered_trans hŒ≥).2) :=
begin
  cases hŒ≥,
  { -- Œ≥ is covered by X‚ÇÅ
    rw functor_map_of_covered_apply_left _ _ hŒ≥,
    rw functor_map_aux_part_one_trans,
    congr,
    exact (functor_map_of_covered_apply_left _ _ _).symm,
    exact (functor_map_of_covered_apply_left _ _ _).symm,
  },
  rw functor_map_of_covered_apply_right _ _ hŒ≥,
  rw functor_map_aux_part_two_trans,
  congr,
  exact (functor_map_of_covered_apply_right _ _ (subsets_of_trans_subset hŒ≥).1).symm,
  exact (functor_map_of_covered_apply_right _ _ (subsets_of_trans_subset hŒ≥).2).symm,
end

lemma functor_map_of_covered_reparam {x y : X} {Œ≥ : dipath x y} (hŒ≥ : covered Œ≥ hX) {f : D(I, I)} (hf‚ÇÄ : f 0 = 0) (hf‚ÇÅ : f 1 = 1) :
  F‚ÇÄ hŒ≥ = F‚ÇÄ ((covered_reparam_iff Œ≥ hX f hf‚ÇÄ hf‚ÇÅ).mp hŒ≥) :=
begin
  cases hŒ≥,
  {
    have : range (Œ≥.reparam f hf‚ÇÄ hf‚ÇÅ) ‚äÜ X‚ÇÅ,
    {
      rw dipath.range_reparam Œ≥ f hf‚ÇÄ hf‚ÇÅ,
      exact hŒ≥,
    },
    rw functor_map_of_covered_apply_left,
    rw functor_map_one_reparam hX h_comm hŒ≥ hf‚ÇÄ hf‚ÇÅ,
    rw ‚Üê functor_map_of_covered_apply_left hX h_comm this,
    refl,
  },
  {
    have : range (Œ≥.reparam f hf‚ÇÄ hf‚ÇÅ) ‚äÜ X‚ÇÇ,
    {
      rw dipath.range_reparam Œ≥ f hf‚ÇÄ hf‚ÇÅ,
      exact hŒ≥,
    },
    rw functor_map_of_covered_apply_right,
    rw functor_map_two_reparam hX h_comm hŒ≥ hf‚ÇÄ hf‚ÇÅ,
    rw ‚Üê functor_map_of_covered_apply_right hX h_comm this,
    refl,
  }

end
  
lemma functor_map_of_covered_cast {x y x' y' : X} {Œ≥ : dipath x y} (hŒ≥ : covered Œ≥ hX) (hx : x' = x) (hy : y' = y) :
  F‚ÇÄ ((covered_cast_iff Œ≥ hX hx hy).mp hŒ≥) =
    (eq_to_hom (show F_obj x' = F_obj x, by rw hx)) ‚â´ (F‚ÇÄ hŒ≥) ‚â´ (eq_to_hom (show F_obj y = F_obj y', by rw hy)) :=
begin
  subst_vars,
  rw eq_to_hom_refl,
  rw eq_to_hom_refl,
  rw category.comp_id,
  rw category.id_comp,
  refl,
end

lemma functor_map_of_covered_cast_left {x y x' : X} {Œ≥ : dipath x y} (hŒ≥ : covered Œ≥ hX) (hx : x' = x) :
  F‚ÇÄ ((covered_cast_iff Œ≥ hX hx rfl).mp hŒ≥) =
    (eq_to_hom (show F_obj x' = F_obj x, by rw hx)) ‚â´ (F‚ÇÄ hŒ≥) :=
begin
  subst_vars,
  rw eq_to_hom_refl,
  rw category.id_comp,
  refl,
end

lemma functor_map_of_covered_cast_right {x y y' : X} {Œ≥ : dipath x y} (hŒ≥ : covered Œ≥ hX) (hy : y' = y) :
  F‚ÇÄ ((covered_cast_iff Œ≥ hX rfl hy).mp hŒ≥) =
    (F‚ÇÄ hŒ≥) ‚â´ (eq_to_hom (show F_obj y = F_obj y', by rw hy)) :=
begin
  subst_vars,
  rw eq_to_hom_refl,
  rw category.comp_id,
  refl,
end

lemma functor_map_of_covered_split_comp {x y : X} {Œ≥ : dipath x y} (hŒ≥ : covered Œ≥ hX) {T : I} (hT‚ÇÄ : 0 < T) (hT‚ÇÅ : T < 1) :
  F‚ÇÄ hŒ≥ = (F‚ÇÄ (covered_split_path hT‚ÇÄ hT‚ÇÅ hŒ≥).1) ‚â´ (F‚ÇÄ (covered_split_path hT‚ÇÄ hT‚ÇÅ hŒ≥).2) :=
begin
  have : covered ((split_dipath.first_part_dipath Œ≥ hT‚ÇÄ).trans (split_dipath.second_part_dipath Œ≥ hT‚ÇÅ)) hX,
  {
    rw split_dipath.first_trans_second_reparam_eq_self Œ≥ hT‚ÇÄ hT‚ÇÅ at hŒ≥,
    exact (covered_reparam_iff _ hX _ _ _).mpr hŒ≥,
  },
  rw ‚Üê functor_map_of_covered_trans hX h_comm this,
  rw functor_map_of_covered_reparam hX h_comm this
      (split_dipath.trans_reparam_map_zero hT‚ÇÄ hT‚ÇÅ)
      (split_dipath.trans_reparam_map_one hT‚ÇÄ hT‚ÇÅ),
  congr,
  apply split_dipath.first_trans_second_reparam_eq_self,
end

lemma functor_map_of_covered_dihomotopic {x y : X} {Œ≥ Œ≥' : dipath x y} {F : dihomotopy Œ≥ Œ≥'} (hF : dipath.dihomotopy.covered F hX) :
  F‚ÇÄ (dipath.dihomotopy.covered_left_of_covered hF) = F‚ÇÄ (dipath.dihomotopy.covered_right_of_covered hF) :=
begin
  cases hF,
  {
    have hŒ≥ := subset_trans (dipath.dihomotopy.range_left_subset F) hF,
    have hŒ≥' := subset_trans (dipath.dihomotopy.range_right_subset F) hF,
    rw functor_map_of_covered_equal hX h_comm rfl _ (or.inl hŒ≥),
    rw functor_map_of_covered_equal hX h_comm rfl _ (or.inl hŒ≥'),
    rw functor_map_of_covered_apply_left hX h_comm hŒ≥,
    rw functor_map_of_covered_apply_left hX h_comm hŒ≥',
    unfold functor_map_aux_part_one,
    rw dihom_subtype_of_dihom_range_subset hŒ≥ hŒ≥' hF,
  },
  {
    have hŒ≥ := subset_trans (dipath.dihomotopy.range_left_subset F) hF,
    have hŒ≥' := subset_trans (dipath.dihomotopy.range_right_subset F) hF,
    rw functor_map_of_covered_equal hX h_comm rfl _ (or.inr hŒ≥),
    rw functor_map_of_covered_equal hX h_comm rfl _ (or.inr hŒ≥'),
    rw functor_map_of_covered_apply_right hX h_comm hŒ≥,
    rw functor_map_of_covered_apply_right hX h_comm hŒ≥',
    unfold functor_map_aux_part_two,
    rw dihom_subtype_of_dihom_range_subset hŒ≥ hŒ≥' hF,
  }
end

end functor_map_covered_properties

/-
-  ### Define the behaviour on partwise covered paths
-/

def functor_map_of_covered_partwise {n : ‚Ñï} : Œ† {x y : X} {Œ≥ : dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n), F_obj x ‚ü∂ F_obj y :=
nat.rec_on n
  (Œª x y Œ≥ hŒ≥, F‚ÇÄ hŒ≥)
  ( Œª n ih x y Œ≥ hŒ≥, (F‚ÇÄ hŒ≥.1) ‚â´ (ih hŒ≥.2))

localized "notation (name := functor_map_of_covered_partwise)
  `F‚Çô` := functor_map_of_covered_partwise hX h_comm" in directed_van_kampen

lemma functor_map_of_covered_partwise_apply_0 {x y : X} {Œ≥ : dipath x y} (hŒ≥ : covered_partwise hX Œ≥ 0) :
  F‚Çô hŒ≥ = F‚ÇÄ hŒ≥ := rfl

lemma functor_map_of_covered_partwise_apply_succ {n : ‚Ñï} {x y : X} {Œ≥ : dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n.succ) :
  F‚Çô hŒ≥ = (F‚ÇÄ hŒ≥.left) ‚â´ (F‚Çô hŒ≥.right) := rfl

lemma functor_map_of_covered_partwise_equal {n : ‚Ñï} {Œ≥‚ÇÅ Œ≥‚ÇÇ : dipath x y} (h : Œ≥‚ÇÅ = Œ≥‚ÇÇ) (hŒ≥‚ÇÅ : covered_partwise hX Œ≥‚ÇÅ n) (hŒ≥‚ÇÇ : covered_partwise hX Œ≥‚ÇÇ n) :
  F‚Çô hŒ≥‚ÇÅ = F‚Çô hŒ≥‚ÇÇ :=
begin
  subst_vars,
end

lemma functor_map_of_covered_partwise_equal' {n m : ‚Ñï} {Œ≥‚ÇÅ Œ≥‚ÇÇ : dipath x y} (h‚ÇÅ : Œ≥‚ÇÅ = Œ≥‚ÇÇ) (h‚ÇÇ : n = m) (hŒ≥‚ÇÅ : covered_partwise hX Œ≥‚ÇÅ n) (hŒ≥‚ÇÇ : covered_partwise hX Œ≥‚ÇÇ m) :
  F‚Çô hŒ≥‚ÇÅ = F‚Çô hŒ≥‚ÇÇ :=
begin
  subst_vars,
end

lemma functor_map_of_covered_partwise_cast_params {n m : ‚Ñï} {Œ≥‚ÇÅ Œ≥‚ÇÇ : dipath x y} (h‚ÇÅ : Œ≥‚ÇÅ = Œ≥‚ÇÇ) (h‚ÇÇ : n = m) (hŒ≥‚ÇÅ : covered_partwise hX Œ≥‚ÇÅ n) :
  F‚Çô hŒ≥‚ÇÅ = F‚Çô (covered_partwise_of_equal_params hX h‚ÇÅ h‚ÇÇ hŒ≥‚ÇÅ) :=
begin
  subst_vars,
end


lemma functor_map_of_covered_partwise_cast {x y x' y' : X} {n : ‚Ñï} {Œ≥ : dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n) (hx : x' = x) (hy : y' = y) :
  F‚Çô ((covered_partwise_cast_iff hX Œ≥ hx hy).mp hŒ≥) =
    (eq_to_hom (show F_obj x' = F_obj x, by rw hx)) ‚â´ (F‚Çô hŒ≥) ‚â´ (eq_to_hom (show F_obj y = F_obj y', by rw hy)) :=
begin
  subst_vars,
  rw eq_to_hom_refl,
  rw eq_to_hom_refl,
  rw category.comp_id,
  rw category.id_comp,
  apply functor_map_of_covered_partwise_equal,
  ext t,
  refl,
end

lemma functor_map_of_covered_partwise_cast_left {x y x' : X} {n : ‚Ñï} {Œ≥ : dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n) (hx : x' = x) :
  F‚Çô ((covered_partwise_cast_iff hX Œ≥ hx rfl).mp hŒ≥) = (eq_to_hom (show F_obj x' = F_obj x, by rw hx)) ‚â´ (F‚Çô hŒ≥) :=
begin
  subst_vars,
  rw eq_to_hom_refl,
  rw category.id_comp,
  apply functor_map_of_covered_partwise_equal,
  ext t,
  refl,
end

lemma functor_map_of_covered_partwise_cast_right {x y y' : X} {n : ‚Ñï} {Œ≥ : dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n) (hy : y' = y) :
  F‚Çô ((covered_partwise_cast_iff hX Œ≥ rfl hy).mp hŒ≥) = (F‚Çô hŒ≥) ‚â´ (eq_to_hom (show F_obj y = F_obj y', by rw hy)) :=
begin
  rw functor_map_of_covered_partwise_cast hX h_comm hŒ≥ rfl hy,
  rw eq_to_hom_refl,
  rw category.id_comp,
end

lemma functor_map_of_covered_partwise_refine_of_covered (k : ‚Ñï):
  Œ† {x y : X} {Œ≥ : dipath x y} (hŒ≥ : covered Œ≥ hX),
    F‚Çô (covered_partwise_of_covered 0 hŒ≥) = F‚Çô (covered_partwise_of_covered k hŒ≥) :=
begin
  induction k with k hk,
  { -- case k = 0
    intros x y Œ≥ hŒ≥,
    refl,
  },
  {
    intros x y Œ≥ hŒ≥,
    have : 1 < k + 2 := by linarith,
    rw functor_map_of_covered_partwise_apply_succ hX h_comm (covered_partwise_of_covered k.succ hŒ≥),
    show (functor_map_of_covered hX h_comm hŒ≥) = _,
    rw functor_map_of_covered_split_comp hX h_comm hŒ≥ (inv_I_pos (lt_trans zero_lt_one this)) (inv_I_lt_one this),
    congr,
    simp [functor_map_of_covered_partwise],
    apply hk,
    exact (covered_split_path (inv_I_pos (lt_trans zero_lt_one this)) (inv_I_lt_one this) hŒ≥).2,
  }
end

/--
  When a path is partwise covered by n+1 paths, you can apply F‚Çô to both parts of Œ≥, when restricting to
  [0, (d+1)/(n+1)] and [(d+1)/(n+1)]. This lemma states that the composition of these two gives F‚Çô Œ≥
-/
lemma functor_map_of_covered_partwise_split {n : ‚Ñï} :
  Œ† {d : ‚Ñï} (hdn : n > d) {x y : X} {Œ≥ : dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n),
 F‚Çô hŒ≥ = F‚Çô (covered_partwise_first_part_d hX (nat.succ_lt_succ hdn) hŒ≥) ‚â´
        F‚Çô (covered_partwise_second_part_d hX (nat.succ_lt_succ hdn) hŒ≥) :=
begin
  induction n with n ih_n,
  { -- Case n = 0,
    intros d hd,
    linarith,
  },
  intros d hdn,
  induction d with d ih_d,
  { -- Case d = 0,
    intros x y Œ≥ hŒ≥,
    refl,
  },
  intros x y Œ≥ hŒ≥,
  rw functor_map_of_covered_partwise_apply_succ hX h_comm hŒ≥,
  have : n > d := nat.succ_lt_succ_iff.mp hdn,
  rw ih_n this _,
  rw functor_map_of_covered_partwise_apply_succ hX h_comm _,
  rw category.assoc,
  show F‚ÇÄ _ ‚â´ (F‚Çô _ ‚â´ F‚Çô _) =  F‚ÇÄ _ ‚â´ (F‚Çô _ ‚â´ F‚Çô _),
  apply eq_of_morphism,
  {
    apply (comp_eq_to_hom_iff _ _ _).mp,
    rw ‚Üê functor_map_of_covered_cast_right,
    apply functor_map_of_covered_equal,
    rw split_properties.first_part_of_first_part Œ≥ (nat.succ_lt_succ hdn) (nat.succ_pos d.succ),
  },
  rw ‚Üê category.assoc,
  apply eq_of_morphism,
  {
    apply (comp_eq_to_hom_iff _ _ _).mp,
    apply (eq_to_hom_comp_iff _ _ _).mp,
    rw ‚Üê functor_map_of_covered_partwise_cast,
    apply functor_map_of_covered_partwise_equal,
    rw split_properties.first_part_of_second_part Œ≥ (hdn) (nat.succ_pos d),
  },
  rw ‚Üê functor_map_of_covered_partwise_cast_left,
  apply functor_map_of_covered_partwise_equal',
  rw split_properties.second_part_of_second_part Œ≥ (nat.lt_of_succ_lt_succ hdn),
  rw nat.succ_sub_succ,
end

/--
  If a path can be covered partwise by `(n+1) ‚â• 2` parts, its refinement by covering it by `k*(n+1)` parts is equal to the composition
  of covering the first part in `k` parts and the second part in `k*n` parts.
-/
lemma functor_map_of_covered_partwise_refine_apply (n k : ‚Ñï) {x y : X} {Œ≥ : dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n.succ) :
  F‚Çô (covered_partwise_refine hX n.succ k hŒ≥) =
      (F‚Çô $ covered_partwise_of_covered k hŒ≥.left) ‚â´ (F‚Çô $ covered_partwise_refine hX n k hŒ≥.right) :=
begin
  have h‚ÇÅ : (n+1+1)*(k+1) - 1 > (k + 1) - 1,
  {
    apply nat.pred_lt_pred (ne_of_gt (nat.succ_pos k)),
    show k + 1 < (n+1+1) * (k + 1),
    have : n + 1 + 1 > 1 := by linarith,
    convert nat.mul_lt_mul_of_pos_right (this) (nat.succ_pos k),
    exact (one_mul k).symm,
  },
  have h‚ÇÇ := frac_eq_inv‚ÇÅ (nat.succ_pos k) (le_of_lt (nat.succ_lt_succ h‚ÇÅ)),
  rw functor_map_of_covered_partwise_split hX h_comm h‚ÇÅ (covered_partwise_refine hX n.succ k hŒ≥),
  apply eq_of_morphism,
  {
    rw ‚Üê functor_map_of_covered_partwise_cast_right hX h_comm _ (congr_arg Œ≥ h‚ÇÇ.symm),
    apply functor_map_of_covered_partwise_equal hX h_comm,
    ext t,
    rw dipath.cast_apply,
    exact split_properties.first_part_eq_of_point_eq _ h‚ÇÇ.symm _ _,
  },
  rw ‚Üê functor_map_of_covered_partwise_cast_left hX h_comm _ (congr_arg Œ≥ h‚ÇÇ.symm),
  apply functor_map_of_covered_partwise_equal' hX h_comm,
  ext t,
  rw dipath.cast_apply,
  exact split_properties.second_part_eq_of_point_eq _ h‚ÇÇ.symm _ _,
  simp,
  rw nat.succ_mul,
  rw nat.sub.right_comm,
  rw nat.add_sub_cancel,
end

lemma functor_map_of_covered_partwise_refine {n : ‚Ñï} (k : ‚Ñï) :
  Œ† {x y : X} {Œ≥ : dipath x y} (hŒ≥_n : covered_partwise hX Œ≥ n) ,
    F‚Çô hŒ≥_n = F‚Çô (covered_partwise_refine hX n k hŒ≥_n) :=
begin
  induction n with n h_ind,
  { -- Case n = 0
    apply functor_map_of_covered_partwise_refine_of_covered,
  },
  -- Case n > 0
  intros x y Œ≥ hŒ≥,
  rw functor_map_of_covered_partwise_refine_apply hX h_comm n k hŒ≥,
  rw ‚Üê functor_map_of_covered_partwise_refine_of_covered hX h_comm _ hŒ≥.left,
  rw functor_map_of_covered_partwise_apply_succ hX h_comm hŒ≥,
  rw h_ind hŒ≥.right,
  congr,
end

lemma functor_map_of_covered_partwise_apply_right_side {x y : X} {Œ≥ : dipath x y} {n : ‚Ñï} (hŒ≥ : covered_partwise hX Œ≥ n.succ) :
  F‚Çô hŒ≥ = F‚Çô (covered_partwise_first_part_end_split hX hŒ≥) ‚â´
          F‚ÇÄ (covered_second_part_end_split hX hŒ≥) :=
begin
  rw functor_map_of_covered_partwise_split hX h_comm (nat.lt_succ_self n),
  rw functor_map_of_covered_partwise_equal' hX h_comm rfl (nat.sub_self n.succ),
  rw functor_map_of_covered_partwise_apply_0,
end

lemma functor_map_of_covered_partwise_trans_case_0 {x y z : X} {Œ≥‚ÇÅ : dipath x y} {Œ≥‚ÇÇ : dipath y z} (hŒ≥‚ÇÅ : covered_partwise hX Œ≥‚ÇÅ 0) (hŒ≥‚ÇÇ : covered_partwise hX Œ≥‚ÇÇ 0) :
  F‚Çô (covered_partwise_trans hŒ≥‚ÇÅ hŒ≥‚ÇÇ) = (F‚Çô hŒ≥‚ÇÅ) ‚â´ (F‚Çô hŒ≥‚ÇÇ) :=
begin
  rw functor_map_of_covered_partwise_apply_0,
  rw functor_map_of_covered_partwise_apply_0,
  rw functor_map_of_covered_partwise_apply_succ,
  rw functor_map_of_covered_partwise_apply_0,
  rw functor_map_of_covered_equal hX h_comm (split_properties.first_part_trans Œ≥‚ÇÅ Œ≥‚ÇÇ) _ ((covered_cast_iff Œ≥‚ÇÅ hX _ _).mp hŒ≥‚ÇÅ),
  rw functor_map_of_covered_equal hX h_comm (split_properties.second_part_trans Œ≥‚ÇÅ Œ≥‚ÇÇ) _ ((covered_cast_iff Œ≥‚ÇÇ hX _ _).mp hŒ≥‚ÇÇ),
  rw functor_map_of_covered_cast_right,
  rw functor_map_of_covered_cast_left,
  simp,
end

lemma functor_map_of_covered_partwise_trans {n : ‚Ñï} : 
  Œ† {x y z : X} {Œ≥‚ÇÅ : dipath x y} {Œ≥‚ÇÇ : dipath y z} (hŒ≥‚ÇÅ : covered_partwise hX Œ≥‚ÇÅ n) (hŒ≥‚ÇÇ : covered_partwise hX Œ≥‚ÇÇ n),
  F‚Çô (covered_partwise_trans hŒ≥‚ÇÅ hŒ≥‚ÇÇ) = (F‚Çô hŒ≥‚ÇÅ) ‚â´ (F‚Çô hŒ≥‚ÇÇ) :=
begin
  induction n with n ih,
  { -- Case n = 0
    intros x y z Œ≥‚ÇÅ Œ≥‚ÇÇ hŒ≥‚ÇÅ hŒ≥‚ÇÇ,
    exact functor_map_of_covered_partwise_trans_case_0 hX h_comm hŒ≥‚ÇÅ hŒ≥‚ÇÇ,
  }, -- Case n > 0
  intros x y z Œ≥‚ÇÅ Œ≥‚ÇÇ hŒ≥‚ÇÅ hŒ≥‚ÇÇ,
  rw functor_map_of_covered_partwise_apply_succ hX h_comm,
  rw functor_map_of_covered_partwise_apply_succ hX h_comm hŒ≥‚ÇÅ,
  rw category.assoc,
  apply eq_of_morphism,
  {
    rw ‚Üê functor_map_of_covered_cast_right,
    apply functor_map_of_covered_equal,
    ext t,
    rw dipath.cast_apply,
    exact split_properties.trans_first_part Œ≥‚ÇÅ Œ≥‚ÇÇ n.succ t,
    exact split_properties.trans_image_inv_eq_first Œ≥‚ÇÅ Œ≥‚ÇÇ n.succ,
  },
  rw functor_map_of_covered_partwise_apply_right_side hX h_comm hŒ≥‚ÇÇ,
  rw functor_map_of_covered_partwise_cast_params hX h_comm rfl (nat.pred_succ n),
  rw ‚Üê category.assoc (F‚Çô _) _ _,
  rw ‚Üê ih _ _,
  have : (n.succ + n.succ).succ - 1 = (n + n).succ.succ,
  {
    rw nat.sub_one,
    rw nat.pred_succ (n.succ + n.succ),
    rw nat.succ_add,
    rw nat.add_succ,
  },
  rw functor_map_of_covered_partwise_cast_params hX h_comm rfl this,
  rw ‚Üê category.assoc _ _,
  rw ‚Üê functor_map_of_covered_partwise_cast_left,
  rw functor_map_of_covered_partwise_apply_right_side hX h_comm _,
  apply eq_of_morphism,
  {
    rw ‚Üê functor_map_of_covered_partwise_cast_right,
    apply functor_map_of_covered_partwise_equal' hX h_comm _ rfl,
    ext t,
    rw dipath.cast_apply,
    rw dipath.cast_apply,
    exact split_properties.trans_first_part_of_second_part Œ≥‚ÇÅ Œ≥‚ÇÇ n t,
    exact split_properties.second_part_trans_image_inv_eq_second Œ≥‚ÇÅ Œ≥‚ÇÇ n,
  },
  {
    rw ‚Üê functor_map_of_covered_cast_left,
    apply functor_map_of_covered_equal,
    ext t,
    rw dipath.cast_apply,
    exact split_properties.trans_second_part_second_part Œ≥‚ÇÅ Œ≥‚ÇÇ n t,
    exact split_properties.second_part_trans_image_inv_eq_second Œ≥‚ÇÅ Œ≥‚ÇÇ n,
  },
  exact split_properties.trans_image_inv_eq_first Œ≥‚ÇÅ Œ≥‚ÇÇ n.succ,
end

lemma functor_map_of_covered_partwise_unique {n m : ‚Ñï} {Œ≥ : dipath x y}
  (hŒ≥_n : covered_partwise hX Œ≥ n)
  (hŒ≥_m : covered_partwise hX Œ≥ m) :
  F‚Çô hŒ≥_n = F‚Çô hŒ≥_m :=
begin
  rw functor_map_of_covered_partwise_refine hX h_comm m hŒ≥_n,
  rw functor_map_of_covered_partwise_refine hX h_comm n hŒ≥_m,
  congr' 2,
  ring,
end

/-
-  ### Define the behaviour on all paths
-/

def functor_map_aux (Œ≥ : dipath x y) : F_obj x ‚ü∂ F_obj y :=
  F‚Çô (classical.some_spec (has_subpaths hX X‚ÇÅ_open X‚ÇÇ_open Œ≥))

localized "notation (name := functor_map_aux)
  `F_map_aux` := functor_map_aux hX X‚ÇÅ_open X‚ÇÇ_open h_comm" in directed_van_kampen

lemma functor_map_aux_apply {n : ‚Ñï} {Œ≥ : dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n) :
  F_map_aux Œ≥ = F‚Çô hŒ≥ := functor_map_of_covered_partwise_unique hX h_comm _ _

lemma functor_map_aux_refl {x : X} : F_map_aux (dipath.refl x) = ùüô (F_obj x) :=
begin
  have : covered_partwise hX (dipath.refl x) 0 := covered_refl x hX,
  rw functor_map_aux_apply _ _ _ _ this,
  rw functor_map_of_covered_partwise_apply_0,
  apply functor_map_of_covered_refl,
end

lemma functor_map_aux_cast {x y x' y' : X} (Œ≥ : dipath x y) (hx : x' = x) (hy : y' = y) :
  F_map_aux (Œ≥.cast hx hy) = (eq_to_hom $ congr_arg F_obj hx) ‚â´ F_map_aux Œ≥ ‚â´ (eq_to_hom $ congr_arg F_obj hy.symm) :=
begin
  subst_vars,
  rw eq_to_hom_refl,
  rw eq_to_hom_refl,
  rw category.comp_id,
  rw category.id_comp,
  apply congr_arg,
  ext t,
  refl,
end

lemma functor_map_aux_trans {x y z : X} (Œ≥‚ÇÅ : dipath x y) (Œ≥‚ÇÇ : dipath y z) : F_map_aux (Œ≥‚ÇÅ.trans Œ≥‚ÇÇ) = F_map_aux Œ≥‚ÇÅ ‚â´ F_map_aux Œ≥‚ÇÇ :=
begin
  cases has_subpaths hX X‚ÇÅ_open X‚ÇÇ_open Œ≥‚ÇÅ with n hn,
  cases has_subpaths hX X‚ÇÅ_open X‚ÇÇ_open Œ≥‚ÇÇ with m hm,
  have hn' : covered_partwise hX Œ≥‚ÇÅ ((n + 1) * (m + 1) - 1) := covered_partwise_refine hX n m hn,
  have hm' : covered_partwise hX Œ≥‚ÇÇ ((n + 1) * (m + 1) - 1),
  {
    rw mul_comm,
    exact covered_partwise_refine hX m n hm,
  },
  rw functor_map_aux_apply hX X‚ÇÅ_open X‚ÇÇ_open h_comm hn',
  rw functor_map_aux_apply hX X‚ÇÅ_open X‚ÇÇ_open h_comm hm',
  rw functor_map_aux_apply hX X‚ÇÅ_open X‚ÇÇ_open h_comm (covered_partwise_trans hn' hm'),
  rw functor_map_of_covered_partwise_trans,
end

lemma functor_map_aux_split_of_covered_partwise {x y : X} {Œ≥ : dipath x y} {n : ‚Ñï} (hŒ≥ : covered_partwise hX Œ≥ n.succ) :
  F_map_aux Œ≥ =  F_map_aux (split_dipath.first_part_dipath Œ≥ (frac_pos zero_lt_one (nat.succ_le_succ (nat.zero_le n.succ))))
    ‚â´ F_map_aux (split_dipath.second_part_dipath Œ≥ (frac_lt_one zero_lt_one (nat.succ_lt_succ (nat.succ_pos n)))) :=
begin
  -- Rewrite L.H.S.
  rw functor_map_aux_apply hX _ _ h_comm hŒ≥,
  rw functor_map_of_covered_partwise_apply_succ hX h_comm hŒ≥,

  --Rewrite R.H.S.
  have : covered_partwise hX (split_dipath.first_part_dipath Œ≥ _) 0 := hŒ≥.left,
  rw functor_map_aux_apply hX _ _ h_comm this,
  rw functor_map_of_covered_partwise_apply_0,
  rw functor_map_aux_apply hX _ _ h_comm hŒ≥.right,
  refl,
end

lemma functor_map_aux_of_covered_dihomotopic {x y : X} {Œ≥ Œ≥' : dipath x y} {F : dihomotopy Œ≥ Œ≥'} (hF : dipath.dihomotopy.covered F hX) :
  F_map_aux Œ≥ = F_map_aux Œ≥' :=
begin
  have : covered_partwise hX Œ≥ 0 := dipath.dihomotopy.covered_left_of_covered hF,
  rw functor_map_aux_apply _ _ _ _ this,
  rw functor_map_of_covered_partwise_apply_0,
  have : covered_partwise hX Œ≥' 0 := dipath.dihomotopy.covered_right_of_covered hF,
  rw functor_map_aux_apply _ _ _ _ this,
  rw functor_map_of_covered_partwise_apply_0,
  exact functor_map_of_covered_dihomotopic hX h_comm hF,
end

lemma functor_map_aux_of_homotopic_dimaps_0 {f g : D(I, X)} {H : directed_map.dihomotopy f g} (hcov : directed_map.dihomotopy.covered_partwise H hX 0 0) :
  F_map_aux (dipath.of_directed_map f) ‚â´ F_map_aux (H.eval_at_right 1) = F_map_aux (H.eval_at_right 0) ‚â´ F_map_aux (dipath.of_directed_map g) :=
begin
  let Œì := dihom_to_path_dihom.dihom_to_path_dihom H,
  have Œì_cov : dipath.dihomotopy.covered Œì hX,
  {
    unfold dipath.dihomotopy.covered,
    cases directed_map.dihomotopy.covered_of_covered_partwise hcov,
    {
      left,
      exact subset_trans (dihom_to_path_dihom.dihom_to_path_dihom_range _) h,
    },
    {
      right,
      exact subset_trans (dihom_to_path_dihom.dihom_to_path_dihom_range _) h,
    },
  },
  have := functor_map_aux_of_covered_dihomotopic hX X‚ÇÅ_open X‚ÇÇ_open h_comm Œì_cov,

  calc F_map_aux (dipath.of_directed_map f) ‚â´ F_map_aux (H.eval_at_right 1)
              = (ùüô (F_obj (f 0)) ‚â´ F_map_aux (of_directed_map f)) ‚â´ F_map_aux (H.eval_at_right 1)                          : by rw category.id_comp
          ... = (F_map_aux (dipath.refl (f 0)) ‚â´ F_map_aux (of_directed_map f)) ‚â´ F_map_aux (H.eval_at_right 1)            : by rw functor_map_aux_refl
          ... = F_map_aux ((dipath.refl (f 0)).trans (of_directed_map f)) ‚â´ F_map_aux (H.eval_at_right 1)                  : by rw functor_map_aux_trans
          ... = F_map_aux (((dipath.refl (f 0)).trans (of_directed_map f)).trans (H.eval_at_right 1))                       : by rw ‚Üê functor_map_aux_trans
          ... = F_map_aux (((H.eval_at_right 0).trans (of_directed_map g)).trans (refl (g 1)))                              : this
          ... = F_map_aux ((H.eval_at_right 0).trans (of_directed_map g)) ‚â´ F_map_aux (refl (g 1))                         : by rw functor_map_aux_trans
          ... = F_map_aux ((H.eval_at_right 0).trans (of_directed_map g)) ‚â´ ùüô (F_obj (g 1))                                : by rw functor_map_aux_refl
          ... = F_map_aux ((H.eval_at_right 0).trans (of_directed_map g))                                                   : by rw category.comp_id
          ... = F_map_aux (H.eval_at_right 0) ‚â´ F_map_aux (dipath.of_directed_map g)                                       : by rw functor_map_aux_trans,
end

lemma functor_map_aux_of_homotopic_dimaps {m : ‚Ñï} :
  Œ†  {f g : D(I, X)} {H : directed_map.dihomotopy f g} (hcov : directed_map.dihomotopy.covered_partwise H hX 0 m),
  F_map_aux (dipath.of_directed_map f) ‚â´ F_map_aux (H.eval_at_right 1) = F_map_aux (H.eval_at_right 0) ‚â´ F_map_aux (dipath.of_directed_map g) :=
begin
  induction m with m ih,
  { -- Case m = 0
    exact Œª f g H hcov, functor_map_aux_of_homotopic_dimaps_0 _ _ _ _ hcov,
  },
  intros f g H hcov,

  have f_cov : covered_partwise hX (dipath.of_directed_map f) m.succ :=
    directed_map.dihomotopy.path_covered_partiwse_of_dihomotopy_covered_partwise_left hcov,
  have g_cov : covered_partwise hX (dipath.of_directed_map g) m.succ :=
    directed_map.dihomotopy.path_covered_partiwse_of_dihomotopy_covered_partwise_right hcov,

  -- Split at 1/(m.succ + 1)
  let T := frac (nat.succ_pos m.succ) (nat.succ_le_succ (nat.zero_le m.succ)),
  have hT‚ÇÄ : 0 < T := frac_pos zero_lt_one (nat.succ_le_succ (nat.zero_le m.succ)),
  have hT‚ÇÅ : T < 1 := frac_lt_one zero_lt_one (nat.succ_lt_succ (nat.succ_pos m)),

  let f‚ÇÅ := (split_dipath.first_part_dipath (dipath.of_directed_map f) hT‚ÇÄ),
  let f‚ÇÇ := (split_dipath.second_part_dipath (dipath.of_directed_map f) hT‚ÇÅ),

  let g‚ÇÅ := (split_dipath.first_part_dipath (dipath.of_directed_map g) hT‚ÇÄ),
  let g‚ÇÇ := (split_dipath.second_part_dipath (dipath.of_directed_map g) hT‚ÇÅ),

  have h‚ÇÅ : F_map_aux f‚ÇÇ ‚â´ F_map_aux (H.eval_at_right 1) = F_map_aux (H.eval_at_right T) ‚â´ F_map_aux g‚ÇÇ,
  {
    have := ih (directed_map.dihomotopy.covered_partwise_second_hpart hcov),
    rw split_dihomotopy.second_part_horizontally_eval_0 at this,
    rw split_dihomotopy.second_part_horizontally_eval_1 at this,
    rw dipath.dipath_of_directed_map_of_to_dimap at this,
    rw dipath.dipath_of_directed_map_of_to_dimap at this,
    rw functor_map_aux_cast at this,
    rw functor_map_aux_cast at this,
    rw functor_map_aux_cast at this,
    rw functor_map_aux_cast at this,
    simp at this,
    have := (eq_to_hom_comp_iff _ _ _).mp this,
    rw ‚Üê category.assoc at this,
    have := (comp_eq_to_hom_iff _ _ _).mp this,
    rw this,
    simp,
  },
  have h‚ÇÇ : F_map_aux f‚ÇÅ ‚â´ F_map_aux (H.eval_at_right T) = F_map_aux (H.eval_at_right 0) ‚â´ F_map_aux g‚ÇÅ,
  {
    have := functor_map_aux_of_homotopic_dimaps_0 hX X‚ÇÅ_open X‚ÇÇ_open h_comm (directed_map.dihomotopy.covered_partwise_first_hpart hcov),
    rw split_dihomotopy.first_part_horizontally_eval_0 at this,
    rw split_dihomotopy.first_part_horizontally_eval_1 at this,
    rw dipath.dipath_of_directed_map_of_to_dimap at this,
    rw dipath.dipath_of_directed_map_of_to_dimap at this,
    rw functor_map_aux_cast at this,
    rw functor_map_aux_cast at this,
    rw functor_map_aux_cast at this,
    rw functor_map_aux_cast at this,
    simp at this,
    have := (eq_to_hom_comp_iff _ _ _).mp this,
    rw ‚Üê category.assoc at this,
    have := (comp_eq_to_hom_iff _ _ _).mp this,
    rw this,
    simp,
  },

  calc F_map_aux (dipath.of_directed_map f) ‚â´ F_map_aux (H.eval_at_right 1) = (F_map_aux f‚ÇÅ ‚â´ F_map_aux f‚ÇÇ) ‚â´ F_map_aux (H.eval_at_right 1) : by rw functor_map_aux_split_of_covered_partwise _ _ _ _ f_cov
                  ... = F_map_aux f‚ÇÅ ‚â´ (F_map_aux f‚ÇÇ ‚â´ F_map_aux (H.eval_at_right 1)) : by rw category.assoc
                  ... = F_map_aux f‚ÇÅ ‚â´ (F_map_aux (H.eval_at_right T) ‚â´ F_map_aux g‚ÇÇ) : by rw h‚ÇÅ
                  ... = (F_map_aux f‚ÇÅ ‚â´ F_map_aux (H.eval_at_right T)) ‚â´ F_map_aux g‚ÇÇ : by rw category.assoc
                  ... = (F_map_aux (H.eval_at_right 0) ‚â´ F_map_aux g‚ÇÅ) ‚â´ F_map_aux g‚ÇÇ : by rw h‚ÇÇ
                  ... = F_map_aux (H.eval_at_right 0) ‚â´ (F_map_aux g‚ÇÅ ‚â´ F_map_aux g‚ÇÇ) : by rw category.assoc
                  ... = F_map_aux (H.eval_at_right 0) ‚â´ F_map_aux (dipath.of_directed_map g) : by rw functor_map_aux_split_of_covered_partwise _ _ _ _ g_cov,
end

lemma functor_map_aux_of_covered_dihomotopic_zero_m {m : ‚Ñï} {x y : X} {Œ≥ Œ≥' : dipath x y} (h : dipath.dihomotopy.dipath_dihomotopic_covered Œ≥ Œ≥' hX 0 m) : 
  F_map_aux Œ≥ = F_map_aux Œ≥' :=
begin
  cases h with G HG,
  have h‚ÇÅ : F_map_aux ((G.eval_at_right 0)) = (eq_to_hom $ congr_arg F_obj Œ≥.source) ‚â´ (ùüô (F_obj x)) ‚â´ (eq_to_hom $ congr_arg F_obj Œ≥'.source.symm),
  {
    have : G.eval_at_right 0 = (dipath.refl x).cast Œ≥.source Œ≥'.source,
    {
      ext t,
      show G(t, 0) = x,
      simp,
    },
    rw this,
    rw functor_map_aux_cast,
    rw functor_map_aux_refl,
  },
  
  have h‚ÇÇ : F_map_aux ((G.eval_at_right 1)) = (eq_to_hom $ congr_arg F_obj Œ≥.target) ‚â´ (ùüô (F_obj y)) ‚â´ (eq_to_hom $ congr_arg F_obj Œ≥'.target.symm),
  {
    have : G.eval_at_right 1 = (dipath.refl y).cast Œ≥.target Œ≥'.target,
    {
      ext t,
      show G(t, 1) = y,
      simp,
    },
    rw this,
    rw functor_map_aux_cast,
    rw functor_map_aux_refl,
  },

  have := functor_map_aux_of_homotopic_dimaps hX X‚ÇÅ_open X‚ÇÇ_open h_comm HG,
  rw [h‚ÇÅ, h‚ÇÇ] at this,
  rw dipath.dipath_of_directed_map_of_to_dimap at this,
  rw dipath.dipath_of_directed_map_of_to_dimap at this,
  rw functor_map_aux_cast at this,
  rw functor_map_aux_cast at this,
  simp at this,
  have := (eq_to_hom_comp_iff _ _ _).mp this,
  have := (comp_eq_to_hom_iff _ _ _).mp this,
  simp at this,
  exact this,
end


lemma functor_map_aux_of_partwise_covered_dihomotopic :
  Œ† {n m : ‚Ñï} {x y : X} {Œ≥ Œ≥' : dipath x y} (h : dipath.dihomotopy.dipath_dihomotopic_covered Œ≥ Œ≥' hX n m),
  F_map_aux Œ≥ = F_map_aux Œ≥' :=
begin
  intros n m,
  induction n with n hn,
  { -- Case n = 0
    intros x y Œ≥ Œ≥' h,
    exact functor_map_aux_of_covered_dihomotopic_zero_m hX X‚ÇÅ_open X‚ÇÇ_open h_comm h,
  },
  rintros x y Œ≥ Œ≥' ‚ü®F, hF‚ü©,
  have := dipath.dihomotopy.dipath_dihomotopic_covered_split hX hF,
  rw functor_map_aux_of_covered_dihomotopic_zero_m hX X‚ÇÅ_open X‚ÇÇ_open h_comm this.1,
  apply hn,
  exact this.2,
end

lemma functor_map_aux_of_pre_dihomotopic {Œ≥ Œ≥' : dipath x y} (h : Œ≥.pre_dihomotopic Œ≥') :
  F_map_aux Œ≥ = F_map_aux Œ≥' :=
begin
  rcases dipath.dihomotopy.dipath_dihomotopic_covered_exists_of_pre_dihomotopic hX h X‚ÇÅ_open X‚ÇÇ_open with ‚ü®n, m, h‚ü©,
  exact functor_map_aux_of_partwise_covered_dihomotopic hX X‚ÇÅ_open X‚ÇÇ_open h_comm h,
end

lemma functor_map_aux_of_dihomotopic (Œ≥ Œ≥' : dipath x y) (h : Œ≥.dihomotopic Œ≥') :
  F_map_aux Œ≥ = F_map_aux Œ≥' :=
begin
  apply eqv_gen.rec_on h,
  exact Œª _ _ h, functor_map_aux_of_pre_dihomotopic _ _ _ _ h,
  exact Œª Œ≥, rfl,
  exact Œª _ _ _ h, h.symm,
  exact Œª _ _ _ h‚ÇÅ h‚ÇÇ, eq.trans,
end

/-
-  ### Define the behaviour on quotient of paths
-/

def functor_map {x y : dœÄ‚Çì X} (Œ≥ : x ‚ü∂ y) : F_obj x ‚ü∂ F_obj y :=
 quotient.lift_on Œ≥ F_map_aux (functor_map_aux_of_dihomotopic hX X‚ÇÅ_open X‚ÇÇ_open h_comm)

localized "notation (name := functor_map)
  `F_map` := functor_map hX X‚ÇÅ_open X‚ÇÇ_open h_comm" in directed_van_kampen

lemma functor_map_apply (Œ≥ : dipath x y) :
  F_map ‚ü¶Œ≥‚üß = F_map_aux Œ≥ := rfl

lemma functor_map_trans {x y z : X} (Œ≥‚ÇÅ : dipath x y) (Œ≥‚ÇÇ : dipath y z) : F_map ‚ü¶Œ≥‚ÇÅ.trans Œ≥‚ÇÇ‚üß = F_map ‚ü¶Œ≥‚ÇÅ‚üß ‚â´ F_map ‚ü¶Œ≥‚ÇÇ‚üß :=
begin
  repeat { rw functor_map_apply },
  exact functor_map_aux_trans hX X‚ÇÅ_open X‚ÇÇ_open h_comm Œ≥‚ÇÅ Œ≥‚ÇÇ,
end

lemma functor_map_id (x : dœÄ‚Çì X) : F_map (ùüô x) = ùüô (F_obj x) :=
begin
  rw id_eq_path_refl,
  rw functor_map_apply,
  apply functor_map_aux_refl,
end

lemma functor_map_comp_path {x y z  : X} (Œ≥‚ÇÅ : dipath x y) (Œ≥‚ÇÇ : dipath y z) : F_map (‚ü¶Œ≥‚ÇÅ‚üß ‚â´ ‚ü¶Œ≥‚ÇÇ‚üß) = F_map ‚ü¶Œ≥‚ÇÅ‚üß ‚â´ F_map ‚ü¶Œ≥‚ÇÇ‚üß :=
begin
  rw functor_map_apply,
  rw functor_map_apply,
  rw comp_eq,
  rw ‚Üê dipath.dihomotopic.comp_lift,
  exact functor_map_trans hX X‚ÇÅ_open X‚ÇÇ_open h_comm Œ≥‚ÇÅ Œ≥‚ÇÇ,
end

lemma functor_map_comp {x y z  : dœÄ‚Çì X} (Œ≥‚ÇÅ : x ‚ü∂ y) (Œ≥‚ÇÇ : y ‚ü∂ z) : F_map (Œ≥‚ÇÅ ‚â´ Œ≥‚ÇÇ) = F_map Œ≥‚ÇÅ ‚â´ F_map Œ≥‚ÇÇ :=
begin
  have := functor_map_comp_path hX X‚ÇÅ_open X‚ÇÇ_open h_comm (Œ≥‚ÇÅ.out) (Œ≥‚ÇÇ.out),
  rw quotient.out_eq at this,
  rw quotient.out_eq at this,
  exact this,
end

/-
  ## Define the functor F : (dœÄ‚Çì X) ‚ü∂ C
-/
def functor : (dœÄ‚Çì X) ‚ü∂ C := {
  obj := F_obj,
  map := Œª x y, F_map,
  map_id' := Œª x, functor_map_id hX X‚ÇÅ_open X‚ÇÇ_open h_comm x,
  map_comp' := Œª x y z Œ≥‚ÇÅ Œ≥‚ÇÇ, functor_map_comp hX X‚ÇÅ_open X‚ÇÇ_open h_comm Œ≥‚ÇÅ Œ≥‚ÇÇ
}

localized "notation (name := functor)
  `F` := functor hX X‚ÇÅ_open X‚ÇÇ_open h_comm" in directed_van_kampen

lemma functor_obj_def {x : dœÄ‚Çì X} : (F).obj x = F_obj x := rfl
lemma functor_map_def {x y : dœÄ‚Çì X} (f : x ‚ü∂ y) : (F).map f = F_map f := rfl

lemma functor_comp_left_object (x : X‚ÇÅ) : (F).obj ((dœÄ‚Çò j‚ÇÅ).obj x) = F‚ÇÅ.obj x :=
begin
  show F_obj (j‚ÇÅ _) = _,
  rw ‚Üê functor_obj_apply_one hX h_comm,
  congr' 1,
  apply subtype.coe_inj.mp,
  simp,
  rw subtype_hom_eq_coe,
  rw subtype_hom_eq_coe,
  exact x.2,
end

lemma functor_comp_left_dipath {x y : X‚ÇÅ} (Œ≥ : dipath x y) : F_map ((dœÄ‚Çò j‚ÇÅ).map ‚ü¶Œ≥‚üß) =
    (eq_to_hom (functor_comp_left_object hX X‚ÇÅ_open X‚ÇÇ_open h_comm x)) ‚â´ (F‚ÇÅ.map ‚ü¶Œ≥‚üß) ‚â´ 
    (eq_to_hom (functor_comp_left_object hX X‚ÇÅ_open X‚ÇÇ_open h_comm y).symm)
     :=
begin
  rw subtype_path_class_eq_map,
  rw functor_map_apply,
  have h‚ÇÅ : range (Œ≥.map (directed_subtype_inclusion X‚ÇÅ)) ‚äÜ X‚ÇÅ := range_dipath_map_inclusion Œ≥,
  have h‚ÇÇ : covered_partwise hX (Œ≥.map (directed_subtype_inclusion X‚ÇÅ)) 0 := or.inl h‚ÇÅ,
  rw functor_map_aux_apply hX X‚ÇÅ_open X‚ÇÇ_open h_comm h‚ÇÇ,
  rw functor_map_of_covered_partwise_apply_0,
  rw functor_map_of_covered_apply_left' hX h_comm h‚ÇÅ,
  rw functor_map_aux_part_one,
  rw subtype_dipath_of_included_dipath_eq,
  rw functor_cast F‚ÇÅ Œ≥,
  simp,
  refl,
end

/- Shpw that the two obtained triangles commute -/
lemma functor_comp_left : (dœÄ‚Çò j‚ÇÅ) ‚ãô F = F‚ÇÅ :=
begin
  apply category_theory.functor.ext,
  intros x y f,
  show F_map _ = _,
  rw ‚Üê quotient.out_eq f,
  rw functor_comp_left_dipath hX X‚ÇÅ_open X‚ÇÇ_open h_comm f.out,
end

lemma functor_comp_right_object (x : X‚ÇÇ) : (F).obj ((dœÄ‚Çò j‚ÇÇ).obj x) = F‚ÇÇ.obj x :=
begin
  show F_obj (j‚ÇÇ _) = _,
  rw ‚Üê functor_obj_apply_two hX h_comm,
  congr' 1,
  apply subtype.coe_inj.mp,
  simp,
  rw subtype_hom_eq_coe,
  rw subtype_hom_eq_coe,
  exact x.2,
end

lemma functor_comp_right_dipath {x y : X‚ÇÇ} (Œ≥ : dipath x y) : F_map ((dœÄ‚Çò j‚ÇÇ).map ‚ü¶Œ≥‚üß) =
    (eq_to_hom (functor_comp_right_object hX X‚ÇÅ_open X‚ÇÇ_open h_comm x)) ‚â´ (F‚ÇÇ.map ‚ü¶Œ≥‚üß) ‚â´ 
    (eq_to_hom (functor_comp_right_object hX X‚ÇÅ_open X‚ÇÇ_open h_comm y).symm)
     :=
begin
  rw subtype_path_class_eq_map,
  rw functor_map_apply,
  have h‚ÇÅ : range (Œ≥.map (directed_subtype_inclusion X‚ÇÇ)) ‚äÜ X‚ÇÇ := range_dipath_map_inclusion Œ≥,
  have h‚ÇÇ : covered_partwise hX (Œ≥.map (directed_subtype_inclusion X‚ÇÇ)) 0 := or.inr h‚ÇÅ,
  rw functor_map_aux_apply hX X‚ÇÅ_open X‚ÇÇ_open h_comm h‚ÇÇ,
  rw functor_map_of_covered_partwise_apply_0,
  rw functor_map_of_covered_apply_right' hX h_comm h‚ÇÅ,
  rw functor_map_aux_part_two,
  rw subtype_dipath_of_included_dipath_eq,
  rw functor_cast F‚ÇÇ Œ≥,
  simp,
  refl,
end

lemma functor_comp_right : (dœÄ‚Çò j‚ÇÇ) ‚â´ F = F‚ÇÇ :=
begin
  apply category_theory.functor.ext,
  intros x y f,
  show F_map _ = _,
  rw ‚Üê quotient.out_eq f,
  rw functor_comp_right_dipath hX X‚ÇÅ_open X‚ÇÇ_open h_comm f.out,
end

lemma functor_uniq_aux_obj (F' : (dœÄ‚Çì X) ‚ü∂ C) (h‚ÇÅ : (dœÄ‚Çò j‚ÇÅ) ‚â´ F' = F‚ÇÅ) (h‚ÇÇ : (dœÄ‚Çò j‚ÇÇ) ‚â´ F' = F‚ÇÇ) (x : X) :
  F'.obj x = (F).obj x :=
begin
  rw functor_obj_def,
  cases ((set.mem_union x X‚ÇÅ X‚ÇÇ).mp (filter.mem_top.mpr hX x)) with hx‚ÇÅ hx‚ÇÇ,
  {
    rw ‚Üê functor_obj_apply_one hX h_comm hx‚ÇÅ,
    rw eq_of_functor_obj h‚ÇÅ.symm,
    show F'.obj _ = F'.obj _,
    apply congr_arg,
    refl,
  },
  {
    rw ‚Üê functor_obj_apply_two hX h_comm hx‚ÇÇ,
    rw eq_of_functor_obj h‚ÇÇ.symm,
    show F'.obj _ = F'.obj _,
    apply congr_arg,
    refl,
  },
end

lemma functor_uniq_of_covered (F' : (dœÄ‚Çì X) ‚ü∂ C) (h‚ÇÅ : (dœÄ‚Çò j‚ÇÅ) ‚â´ F' = F‚ÇÅ) (h‚ÇÇ : (dœÄ‚Çò j‚ÇÇ) ‚â´ F' = F‚ÇÇ) {x y : X} {Œ≥ : dipath x y} (hŒ≥ : covered Œ≥ hX) :
  F'.map ‚ü¶Œ≥‚üß =
    (eq_to_hom (functor_uniq_aux_obj hX X‚ÇÅ_open X‚ÇÇ_open h_comm F' h‚ÇÅ h‚ÇÇ x)) ‚â´ (F).map ‚ü¶Œ≥‚üß ‚â´ (eq_to_hom (functor_uniq_aux_obj hX X‚ÇÅ_open X‚ÇÇ_open h_comm F' h‚ÇÅ h‚ÇÇ y).symm) :=
begin
  rw functor_map_def,
  rw functor_map_apply,
  have : covered_partwise hX Œ≥ 0 := hŒ≥,
  rw functor_map_aux_apply _ _ _ _ this,
  rw functor_map_of_covered_partwise_apply_0 _ _ this,
  cases hŒ≥,
  {
    rw functor_map_of_covered_apply_left' _ _ hŒ≥,
    unfold functor_map_aux_part_one,
    rw ‚Üê map_subtype_dipath_eq Œ≥ hŒ≥,
    show ((dœÄ‚Çò j‚ÇÅ) ‚â´ F').map _ = _,
    rw eq_of_functor_map h‚ÇÅ,
    simp,
    refl,
  },
  {
    rw functor_map_of_covered_apply_right' _ _ hŒ≥,
    unfold functor_map_aux_part_two,
    rw ‚Üê map_subtype_dipath_eq Œ≥ hŒ≥,
    show ((dœÄ‚Çò j‚ÇÇ) ‚â´ F').map _ = _,
    rw eq_of_functor_map h‚ÇÇ,
    simp,
    refl,
  },
end

lemma functor_uniq_aux_map (F' : (dœÄ‚Çì X) ‚ü∂ C) (h‚ÇÅ : (dœÄ‚Çò j‚ÇÅ) ‚â´ F' = F‚ÇÅ) (h‚ÇÇ : (dœÄ‚Çò j‚ÇÇ) ‚â´ F' = F‚ÇÇ) {n : ‚Ñï} :
  Œ† {x y : X} {Œ≥ : dipath x y} (hŒ≥ : covered_partwise hX Œ≥ n), F'.map ‚ü¶Œ≥‚üß =
    (eq_to_hom (functor_uniq_aux_obj hX X‚ÇÅ_open X‚ÇÇ_open h_comm F' h‚ÇÅ h‚ÇÇ x)) ‚â´ (F).map ‚ü¶Œ≥‚üß ‚â´ (eq_to_hom (functor_uniq_aux_obj hX X‚ÇÅ_open X‚ÇÇ_open h_comm F' h‚ÇÅ h‚ÇÇ y).symm) :=
begin
  induction n with n ih,
  { -- Case n = 0
    intros x y Œ≥ hŒ≥,
    exact functor_uniq_of_covered _ _ _ _ F' h‚ÇÅ h‚ÇÇ hŒ≥,
  },
  -- Case n > 0
  intros x y Œ≥ hŒ≥,
  let T := frac (nat.succ_pos n.succ) (nat.succ_le_succ (nat.zero_le n.succ)), -- T = 1/(n+1+1)
  have hT‚ÇÄ : 0 < T := frac_pos (zero_lt_one) _,
  have hT‚ÇÅ : T < 1 := frac_lt_one (zero_lt_one) (nat.succ_lt_succ (nat.succ_pos n)),
  rw split_dipath.first_trans_second_reparam_eq_self Œ≥ hT‚ÇÄ hT‚ÇÅ,
  rw dipath.dihomotopic.quot_reparam,
  rw dipath.dihomotopic.comp_lift,
  rw ‚Üê comp_eq,
  rw category_theory.functor.map_comp,
  rw category_theory.functor.map_comp,
  rw functor_uniq_of_covered hX X‚ÇÅ_open X‚ÇÇ_open h_comm  F' h‚ÇÅ h‚ÇÇ hŒ≥.left,
  rw ih hŒ≥.right,
  simp,
end

lemma functor_uniq (F' : (dœÄ‚Çì X) ‚ü∂ C) (h‚ÇÅ : (dœÄ‚Çò j‚ÇÅ) ‚â´ F' = F‚ÇÅ) (h‚ÇÇ : (dœÄ‚Çò j‚ÇÇ) ‚â´ F' = F‚ÇÇ) : F' = F :=
begin
  apply category_theory.functor.ext,
  intros x y f,
  rw ‚Üê quotient.out_eq f,
  cases has_subpaths hX X‚ÇÅ_open X‚ÇÇ_open (quotient.out f) with n hn,
  exact functor_uniq_aux_map hX X‚ÇÅ_open X‚ÇÇ_open h_comm F' h‚ÇÅ h‚ÇÇ hn,
end

end pushout_functor

include hX X‚ÇÅ_open X‚ÇÇ_open

/--
  The Van Kampen Theorem: the fundamental category functor dœÄ induces a pushout in the category of categories.
-/
theorem directed_van_kampen {hX‚ÇÅ : is_open X‚ÇÅ} {hX‚ÇÇ : is_open X‚ÇÇ} {hX : X‚ÇÅ ‚à™ X‚ÇÇ = set.univ} :
  is_pushout (dœÄ‚Çò i‚ÇÅ) (dœÄ‚Çò i‚ÇÇ) (dœÄ‚Çò j‚ÇÅ) (dœÄ‚Çò j‚ÇÇ) :=
begin
  apply pushout_alternative.is_pushout_alternative,
  {
    rw ‚Üê functor.map_comp,
    rw ‚Üê functor.map_comp,
    exact congr_arg dœÄ‚Çò rfl
  },
  intros C F‚ÇÅ F‚ÇÇ h_comm,
  use (pushout_functor.functor hX X‚ÇÅ_open X‚ÇÇ_open h_comm),
  split,
  {
    split,
    apply pushout_functor.functor_comp_left,
    apply pushout_functor.functor_comp_right
  },
  rintros F' ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
  exact pushout_functor.functor_uniq hX X‚ÇÅ_open X‚ÇÇ_open h_comm F' h‚ÇÅ h‚ÇÇ,
end

end directed_van_kampen